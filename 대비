자기소개 내용 (분량 : 1분)
안녕하십니까. 신한카드 ICT개발 직무에 있어 꼭 필요한 사람이 되고 싶은 지원자 위지훈입니다.
저는 캐피탈사에서 다양한 개발 프로젝트 경험을 통해 IT 역량을 열정적으로 쌓아왔습니다.

특히 딜러 라운지라는 채널계 플랫폼을 진행하며 전반적인 개발 프로세스에 대한 이해도를 높일 수 있었습니다. 그리고 작년 9월에 중고차 대출 프로세스를 개발하여 첫런칭을 이끌었습니다.

이런 경험을 통해 여신 금융에 관한 실무 역량을 기르고 있습니다. 업무를 수행한 개발 경험 중 가장 기억에 남는 경험은 가계대출 축소로 인한 사업자 대출 전환 프로세스를 개발한 경험입니다.

이 개발 경험을 통해 사업자 대출과 개인 대출에 대한 전반적인 프로세스와 신용 기관을 통한 대외계 통신으로 신용 정보를 활용하는 능력을 키울 수 있었습니다.

이러한 저의 여신 금융 경험을 살려 신한카드에 입사하여 디지털 우위에 기여할 수 있다고 생각합니다.












1. 지원 동기(왜 신한카드여야 하는지), 이직사유
네 면접관님 말씀드리겠습니다. 캐피탈사에서 일하며 금융업의 여신 금융 IT 역량을 강화시킬 수 있었습니다. 하지만, 대량 트래픽을 활용한 디지털 우위와 혁신적인 변화를 경험할 수 있는 기회가 없었습니다. 그로인해 성장하는 데에 있어 한계를 느끼게 되었습니다. 따라서 기존 여신업을 하는 금융사에서 대용량 트레픽과 변화에 두려워하지 않는 금융사에서 경험하고 배울 수 있기를 원했습니다. 이에 따라 신한카드가 가장 적합하다고 판단하여 신한카드를 지원하게 되었습니다. 

2.고객의 삶과 연관지어 최적의 금융 상품을 제공하는 것이 무엇이라고 생각합니까?
고객은 필요에 의해 금융 상품을 이용한다고 생각합니다.
금융 상품을 이용함에 있어
첫째, 고객별 맞춤형 상품 추천
둘째, 고객의 정보를 활용한 투명한 심사 규정
셋째,. 금융 상품 이용에 간편화
넷째,  사후 관리를 통한 고객 관리를 바탕으로 고객의 삶을 윤택하게 하는 금융 서비스가 최적의 금융 상품이라고 생각합니다.

3.딜러 라운지는 어떤 서비스인가요?
딜러라운지의 경우 중고차 딜러분들을 위한 차량 간편 조회 서비스입니다.
차량번호를 통한 시세조회, 사양조회, 사고이력조회 등의 서비스를 지원하고 있습니다.
이외에 별도의 포인트 제도를 통해 딜러들의 등급화와 차별화하여 다양한 서비스를 이용할 수 있도록 지원하는 플랫폼입니다.

4.오토 리스 견적의 경우 어떤 서비스 인가요?
오토 리스 견적의 경우 신차, 중고차의 리스 견적을 모바일을 통해 간편하게 조회하여 내부수익률에 따른 금리 산출과 조회된 견적을 레포트 툴을 통해 이미지화하여 고객에게 공유할 수 있도록 지원하는 모바일 웹 플랫폼입니다.

5.재고금융 상품의 경우 어떤 서비스 인가요?
재고금융의 경우 매매상사를 타겟으로한 한도 대출 서비스입니다.
상사별 제휴를 체결하여 상품용 차량을 구매함에 있어 차별화된 금리를 통해 한도내에 대출을 지원하는 서비스입니다.
이는 상사에 가입되어있는 딜러를 타겟으로 연계 대출을 노리는 서비스입니다.

6.중고차 다이렉트의 경우 어떤 서비스 인가요?
중고차 다이렉트의 경우 대고객용 플랫폼과 여러 연계 채널을 통해 유입된 고객이 차량번호 입력부터 최종 전자약정을 통해 직접 대출을 실행하는 서비스입니다.
고객이 직접 대출을 실행하기 떄문에 기존 영업 대출과 차별화를 위해 우대금리를 적용하였습니다.

6.WARA-JEJU 서비스는 무엇인가요?
와라제주의 경우 바쁜 사회인을 위한 제주도 여행 플래너로써 오픈 API와 데이터 허브를 통해 수집한 영업점을 추천하고 사용자가 장소를 선택하여 계획을 편리하게 설계할 수 있도록 지원합니다. 이를통해 하버사인과 플로이드 워셜를 통해 경로들간에 최단 거리를 추천해주는 플랫폼입니다.

7. 어떻게 간소화한 인터페이스를 Display할 것 같은가?
구글 애널리틱스와 같은 트래픽 추척을 통해 사용자별 최종 목적지 혹은 메뉴 사용량을 분석하여 메인 인터페이스에 display 해줄 것 같습니다.
또한, 안드로이드 ios내 테마유틸을 만들어서 네이티브 기능 중 딜리게이트 메소드를 활용하여 테마를 적용할 것 같습니다.
이런 사용자 친화적인 인터페이스를 통해 사용자에게 보다 직관적인 인터페이스를 지원할 수 있다고 생각합니다.



8.토큰 기반 인증 서비스 구현이란?
Spring 시쿠리티를 활용하여 디스펙쳐 서블릿 접근 전에 필터를 통해 CORS와 Crsf를 설정하였습니다.
또한, JWT 프로바이더 클래스를 통해 토큰을 생성하고 생성된 토큰을 검증하였습니다. 이때 토큰 정보는 사용자 ID와 권한등의 정보를 암호화하여 토큰화하였습니다.
이후 Http 바디에 담아 사용자에게 보낸 후 Http 해더에 토큰 정보를 확인하여 유요한 사용자인지 검증하였습니다.
JWT의 가장큰 장점은 서버 트렉픽을 줄일 수 있다는 것입니다. 이유는 JWT를 발행하고 검증만 하는 로직이 있을뿐 해당 토큰의 정보를 별도로 저장하지 않아 서버에 이점이 많습니다.
하지만 반대로 단점으로는 클라이언트가 토큰을 보관해야 하기 떄문에 기본 암호화 기법이나 Base64등의 인코딩으로 암호화 한다면 유출의 위험이 발생할 수 있습니다.
이를 방지하고자 JWE 암호화 기법을 사용하기도 합니다.

9. 서버, 클라이언트간 HTTP 프로토콜 REST 아키텍처 적용
서버와 클라이언트 통신을 RestFul하게 구성하기 위해 리소스 조회 요청에는 GET 메소드를 사용하였고 리소스 저장 요청에는 POST 메소드 리소스 수정 요청의 경우 PUT 메소드를 사용하였습니다.
또한, 리소스 제거의 경우 내부 정책상 Delete 메소드를 사용하지 않고 수정 요청으로 삭제여부를 갱신하여 처리를 했습니다.

10. Data Modeler ERwin Logical/Physical 구조 설계란
테이블 설계 시 데이터 모델러인 ER윈을 사용하여 메타시스템 내 정의된 명칭과 용어를 활용하여 논리적 물리적 구조를 설계하였습니다. 이후 설계한 테이블을 참조하여 Create와 pk index를 생성했습니다.




11. nginx 설치 SSL, TLS, proxy_pass 적용
프로젝트에 합류해서 오픈소스 활용을 위해 CentOS, 웹서버는 nginx, 와스의 경우 톰켓 임베디드를 사용하였습니다.
이떄 앤진엑스 설치는 특정 디렉토리에서 Make 컴파일을 통해 설치하였고
SSL 인증서 설정의 경우 Nginx.conf파일 내 설정하였습니다.
또한, 부하분산을 위해 로드밸런싱 설정의 경우 Proxy_pass 설정을 하였습니다.

12. GitLab 원 버튼 배포 시스템 구축하여 jar 파일 배포 자동화?
GitLab의 배포시스템 구축을 위해 기존 프로젝트의 git 원격 저장소를 GitLab 저장소로 설정하였고
gitlab_ci 설정을 통해 Test, Build, Deploy 단계를 정의하여 깃랩 파이프라인에서 단계별 배포를 진행할 수 있도록 하였습니다.
이를통해 CI/CD를 구축하였습니다.

13. User Daily Rolling File 로그모니터링 구현?
Slf4j의 구현체인 LogBack을 활용하여 유저별 로그 파일 적제를 구현하였습니다.
이떄 유저 정보의 경우 Clame 객체를 통해 JWT내 사용자ID를 추출하였으며,
로그파일 보관기간에 따라 FileNamePattern으로 백업하였습니다.

14. 개발 환경 구축 및 압축한 상태로 배포하기 위해 npm 적용?
프론트앤드 라이브러리의 경우 리엑트로 구현하였습니다.
이떄, 자바스크립트 V8 오픈소스와 Build 시 웹팩을 적용하는 등에 의존성을 쉽게 관리하고자 npm을 사용하였습니다.
이떄 웹팩에 소스 축소와 더불어 사용하지 않는 코드를 제거하는등의 성능 최적화를 위해 build시 추가하였습니다.

15. Promise API를 활용한 HTTP 비동기 통신?
프로미스 api에 axios를 사용하였습니다. 기존 에이작스를 통해 경험한 콜백 이슈를 개선하고 에러처리에 간편화를 기대하여 axios를 사용하였습니다.
또한, 서버간에 비동기 통신을 통해 응답의 타임아웃 처리와 응답 데이터를 편리하게 다루기 위해 사용하였습니다. 단점으로 뽑히는 npm모듈을 사용해야한다는 것은 기존 프로젝트를 npm 모듈로 정의하였기 때문에 해당하지 않았습니다.

16. Google, FaceBook tracking GA/Pixel Code 추가란?
GA와 페이스북 트레킹 스크립트를 화면내 추가하고 특정 이벤트, 화면이동을 추적하기 위해 레별별로 DOM샐렉터내 요소를 추가하였습니다.
이를통해 사용자 자주 접근하는 사이트 혹은 자주 사용하는 메뉴를 추적하고 사용자에게 편리한 UI를 제공하는데 사용하였습니다.

17. Spring Boot의 장점은?
스프링부트의 경우 스프링 프레임워크에 주로 사용되는 설정과 라이브러리를 버전관리를 위임하여 사용할 수 있습니다. 또한, Junit과 톰켓을 내장하고 있어 테스트와 개발하는데 있어 편리함을 제공합니다.
또한 배포하기위해서 패키징을 해야할때 독립적으로 실행할 수있도록 JAR 확장자로 패키징을 지원합니다.
이런 이유를 근거하여 스프링 부트의 가장 큰 장점은 개발자로 하여금 비지니스 로직을 구현하는데 집중할 수 있도록 지원하는 부분이 큰 장점이라고  생각합니다.







18. Spring 프레임워크 실행 구조는 어떻게 되나요?
스프링 프레임워크의 경우 클라이언트 요청이 들어오면 filter의 요청 전 요청 후 처리를 하는 부분과 이를 지나 디스펙쳐 서블릿으로 접근합니다. 이후 서블릿 맵핑을 통해 컨트롤러를 찾고 비지니스 로직을 실행하게 됩니다. 이후 뷰를 전달해야 한다면 뷰리졸버를 통해 뷰를 찾고 응답 내용과 뷰를 함께 디스펙쳐 서블릿에서 클라이언트로 전달됩니다.
만약 인터셉터가 구현되어있다면, 디스팩쳐 서블릿 이후 실행이 되며, 
AOP 설정을 통한 횡단 처리를 지원합니다.
AOP의 경우 로깅, 보안, 권한 체크 등에 활용될 있고 구현의 경우 스프링에 Aspect 어노테이션을 통해 어드바이스 타켓을 지정하여 처리를 합니다.
