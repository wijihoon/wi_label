1.토큰 기반 인증 서비스 구현이란?

Spring 시쿠리티를 활용하여 디스펙쳐 서블릿 접근 전에 필터를 통해 CORS와
Crsf를 설정하였습니다.

또한, JWT 프로바이더 클래스를 통해 토큰을 생성하고 생성된 토큰을 검증하였습니다. 이때 토큰 정보는 사용자 ID와 권한등의 정보를 암호화하여 토큰화하였습니다.

이후 Http 바디에 담아 사용자에게 보낸 후 Http 해더에 토큰 정보를 확인하여 유요한 사용자인지 검증하였습니다.


2. 서버, 클라이언트간 HTTP 프로토콜 REST 아키텍처 적용

서버와 클라이언트 통신을 RestFul하게 구성하기 위해 리소스 조회 요청에는 GET 메소드를 사용하였고 리소스 저장 요청에는 POST 메소드 리소스 수정 요청의 경우 PUT 메소드를 사용하였습니다.
또한, 리소스 제거의 경우 내부 정책상 Delete 메소드를 사용하지 않고 수정 요청으로 삭제여부를 갱신하여 처리를 했습니다.

3. Data Modeler ERwin Logical/Physical 구조 설계란

테이블 설계 시 데이터 모델러인 ER윈을 사용하여 메타시스템 내 정의된 명칭과 용어를 활용하여 논리적 물리적 구조를 설계하였습니다. 이후 설계한 테이블을 참조하여 Create와 pk index를 생성했습니다.

4. nginx 설치 SSL, TLS, proxy_pass 적용

프로젝트에 합류해서 오픈소스 활용을 위해 CentOS, 웹서버는 nginx, 와스의 경우 톰켓 임베디드를 사용하였습니다.

이떄 앤진엑스 설치는 특정 디렉토리에서 Make 컴파일을 통해 설치하였고
SSL 인증서 설정의 경우 Nginx.conf파일 내 설정하였습니다.

또한, 부하분산을 위해 로드밸런싱 설정의 경우 Proxy_pass 설정을 하였습니다.

5. GitLab 원 버튼 배포 시스템 구축하여 jar 파일 배포 자동화?

GitLab의 배포시스템 구축을 위해 기존 프로젝트의 git 원격 저장소를 GitLab 저장소로 설정하였고 gitlab_ci 설정을 통해 Test, Build, Deploy 단계를 정의하여 깃랩 파이프라인에서 단계별 배포를 진행할 수 있도록 하였습니다.

이를통해 CI/CD를 구축하였습니다.

6. User Daily Rolling File 로그모니터링 구현?

Slf4j의 구현체인 LogBack을 활용하여 유저별 로그 파일 적제를 구현하였습니다.

이떄 유저 정보의 경우 Clame 객체를 통해 JWT내 사용자ID를 추출하였으며,

로그파일 보관기간에 따라 FileNamePattern으로 백업하였습니다.

7. 개발 환경 구축 및 압축한 상태로 배포하기 위해 npm 적용?

프론트앤드 라이브러리의 경우 리엑트로 구현하였습니다.
이떄, 자바스크립트 V8 오픈소스와 Build 시 웹팩을 적용하는 등에 의존성을 쉽게 관리하고자 npm을 사용하였습니다.

이떄 웹팩에 소스 축소와 더불어 사용하지 않는 코드를 제거하는등의 성능 최적화를 위해 build시 추가하였습니다.

8. Promise API를 활용한 HTTP 비동기 통신?

프로미스 api에 axios를 사용하였습니다. 기존 에이작스를 통해 경험한 콜백 이슈를 개선하고 에러처리에 간편화를 기대하여 axios를 사용하였습니다.

또한, 서버간에 비동기 통신을 통해 응답의 타임아웃 처리와 응답 데이터를 편리하게 다루기 위해 사용하였습니다. 단점으로 뽑히는 npm모듈을 사용해야한다는 것은 기존 프로젝트를 npm 모듈로 정의하였기 때문에 해당하지 않았습니다.

9. Google, FaceBook tracking GA/Pixel Code 추가란?

GA와 페이스북 트레킹 스크립트를 화면내 추가하고 특정 이벤트, 화면이동을 추적하기 위해 레별별로 DOM샐렉터내 요소를 추가하였습니다.

이를통해 사용자 자주 접근하는 사이트 혹은 자주 사용하는 메뉴를 추적하고 사용자에게 편리한 UI를 제공하는데 사용하였습니다.

10. Spring Boot의 장점은?

스프링부트의 경우 스프링 프레임워크에 주로 사용되는 설정과 라이브러리를 버전관리를 위임하여 사용할 수 있습니다. 또한, Junit과 톰켓을 내장하고 있어 테스트와 개발하는데 있어 편리함을 제공합니다.

또한 배포하기위해서 패키징을 해야할때 독립적으로 실행할 수있도록 JAR 확장자로 패키징을 지원합니다.

이런 이유를 근거하여 스프링 부트의 가장 큰 장점은 개발자로 하여금 비지니스 로직을 구현하는데 집중할 수 있도록 지원하는 부분이 큰 장점이라고  생각합니다.

11. Spring 프레임워크 실행 구조는 어떻게 되나요?

스프링 프레임워크의 경우 클라이언트 요청이 들어오면 filter의 요청 전 요청 후 처리를 하는 부분과 이를 지나 디스펙쳐 서블릿으로 접근합니다. 이후 서블릿 맵핑을 통해 컨트롤러를 찾고 비지니스 로직을 실행하게 됩니다. 이후 뷰를 전달해야 한다면 뷰리졸버를 통해 뷰를 찾고 응답 내용과 뷰를 함께 디스펙쳐 서블릿에서 클라이언트로 전달됩니다.

만약 인터셉터가 구현되어있다면, 디스팩쳐 서블릿 이후 실행이 되며, 
AOP 설정을 통한 횡단 처리를 지원합니다.

AOP의 경우 로깅, 보안, 권한 체크 등에 활용될 있고 구현의 경우 스프링에 Aspect 어노테이션을 통해 어드바이스 타켓을 지정하여 처리를 합니다.

12. Spring MVC란?

Spring MVC의 경우 클라이언트 요청이 들어오면 filter의 요청 전 요청 후 처리를 하는 부분과 이를 지나 디스펙쳐 서블릿으로 접근합니다. 이후 서블릿 맵핑을 통해 컨트롤러를 찾고 비지니스 로직을 실행하게 됩니다. 이후 뷰를 전달해야 한다면 뷰리졸버를 통해 뷰를 찾고 응답 내용과 뷰를 함께 디스펙쳐 서블릿에서 클라이언트로 전달됩니다.

이렇게 컨트롤러에서 모델과 뷰를 모델엔뷰 객체를 클라이언트에게 보냅니다.
